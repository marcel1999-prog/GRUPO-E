theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: op_84 por genotipo y riego")
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
plot(modelo)
ggplot(fb, aes(x = geno, y = rwc_84, colour = riego)) +
geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
labs(title = "boxplot con interacción de niveles de riego y genotipo" ,
x = "Interacción Riego y Genotipo",
y = "Valor de la variable respuesta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lme4)
modelo <- lme4::lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
plot(modelo)
ol <- boxplot(rwc_84~riego*geno, fb)
ol
library(inti)
model <- remove_outliers(data = fb
,formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,plot_diag = T
)
model
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
```{r}
library(agricolae)
# Ejecutar la prueba de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)
# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
# Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
# Graficar
plot(tukey_result)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
tukey_result
library(tidyverse)
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = rwc_84, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "genotipo", y = "rwc_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: rwc_84 por genotipo y riego") +
geom_text(aes(label = str_sub(groups, 1, 2)),  # Mostrar solo las primeras 2 letras
position = position_dodge(0.9),
vjust = -0.5)  # Ajusta la posición
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = rwc_84, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "genotipo", y = "rwc_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: rwc_84 por genotipo y riego") +
geom_text(aes(label = str_sub(groups, 1, 2)),  # Mostrar solo las primeras 2 letras
position = position_dodge(0.9),
vjust = -0.5)  # Ajusta la posición vertical de las letras
library(lme4)
modelo <- lme4::lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
library(emmeans)
library(multcomp)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(letters = letters, reversed = T)
cm3
dtcm <- as.data.frame(cm2) %>%
rename(sig = ".group")
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean*1*1),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "rwc_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: rwc_84 por genotipo y riego")
library(tidyverse)
library(corrplot)
# Eliminar filas con NA y seleccionar solo columnas numéricas no vacías
fb_clean <- fb %>%
select_if(~ is.numeric(.) && any(!is.na(.))) %>%  # Selecciona solo columnas numéricas con al menos un valor no NA
drop_na()  # Elimina filas con NA restantes
# Verificar que hay columnas numéricas suficientes para calcular la correlación
if (ncol(fb_clean) > 1) {
# Calcular la matriz de correlación
cor_matrix <- cor(fb_clean, use = "complete.obs")
# Imprimir la matriz de correlación
print(cor_matrix)
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "circle")
} else {
cat("No hay suficientes columnas numéricas o datos completos para calcular la correlación.\n")
}
library(psych)
fb %>%
select_if(is.numeric) %>%
dplyr::select(!c("block")) %>%
pairs.panels(x = .
, hist.col="red"
, pch = 21
, stars = TRUE
, scale = FALSE
, lm = TRUE
)
library(psych)
fb %>%
select_if(is.numeric) %>%
dplyr::select(!c("block")) %>%
pairs.panels(x = .
, hist.col="red"
, pch = 21
, stars = TRUE
, scale = FALSE
, lm = TRUE
)
# Cargar las librerías necesarias
library(FactoMineR)
library(dplyr)
library(ggplot2)
library(gridExtra)
# Agrupar y resumir los datos
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE), .names = "mean_{col}")) %>%
ungroup()  # Desagrupar los datos después de resumir
# Realizar el PCA, ajustando quali.sup a las columnas cualitativas (riego y geno)
pca_result <- PCA(mv, scale.unit = TRUE, quali.sup = c(1, 2), graph = FALSE)
# Graficar los individuos
p1 <- plot.PCA(pca_result, habillage = "riego", title = "Gráfico de Individuos")
# Graficar las variables
p2 <- plot.PCA(pca_result, choix = "var", title = "Gráfico de Variables")
# Combinar las gráficas en una sola
grid.arrange(p1, p2, nrow = 1)
# Cargar las librerías necesarias
library(FactoMineR)
library(dplyr)
library(ggplot2)
library(gridExtra)
# Agrupar y resumir los datos
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE), .names = "mean_{col}")) %>%
ungroup()  # Desagrupar los datos después de resumir
# Realizar el PCA, ajustando quali.sup a las columnas cualitativas (riego y geno)
pca_result <- PCA(mv, scale.unit = TRUE, quali.sup = c(1, 2), graph = FALSE)
# Graficar los individuos
p1 <- plot.PCA(pca_result, habillage = "riego", title = "Gráfico de Individuos")
# Graficar las variables
p2 <- plot.PCA(pca_result, choix = "var", title = "Gráfico de Variables")
# Combinar las gráficas en una sola
grid.arrange(p1, p2, nrow = 1)
source('https://inkaverse.com/setup.r')
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- url %>%
as_sheets_id()
fb <- gs %>%
range_read("fb")
str(fb)
modelo <- aov(formula = spad_29 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
plot(modelo)
ggplot(fb, aes(x = geno, y = spad_29, colour = riego)) +
geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
labs(title = "boxplot con interacción de niveles de riego y genotipo" ,
x = "Interacción Riego y Genotipo",
y = "Valor de la variable respuesta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lme4)
modelo <- lme4::lmer(formula = spad_29 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
plot(modelo)
ol <- boxplot(spad_29~riego*geno, fb)
ol
library(inti)
model <- remove_outliers(data = fb
,formula = spad_29 ~ riego + geno + riego*geno + (1|bloque)
,plot_diag = T
)
model
modelo <- aov(formula = spad_29 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
library(agricolae)
# Ejecutar el test de Duncan
duncan_riego_geno <- duncan.test(modelo, trt = c("riego","geno"), group = TRUE)
print(duncan_riego_geno)
# Verificar si existen grupos formados
if (!is.null(duncan_riego_geno$groups)) {
# Modificar las etiquetas de la columna de grupos para mostrar solo las primeras 2 letras
duncan_riego_geno$groups <- duncan_riego_geno$groups %>%
dplyr::mutate(groups = substr(groups, 1, 2))  # Mostrar solo las 3 primeras letras de la etiqueta
# Graficar
plot(duncan_riego_geno)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
library(agricolae)
# Ejecutar la prueba de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)
# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
# Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
# Graficar
plot(tukey_result)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
tukey_result
library(tidyverse)
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = spad_29, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "Genotipo", y = "spad_29", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: spad_29 por genotipo y riego") +
geom_text(aes(label = str_sub(groups, 1, 2)),  # Mostrar solo las primeras 2 letras
position = position_dodge(0.9),
vjust = -0.5)  # Ajusta la posición vertical de las letras
library(lme4)
modelo <- lme4::lmer(formula = spad_29 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
library(emmeans)
library(multcomp)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(letters = letters, reversed = T)
cm3
dtcm <- as.data.frame(cm2) %>%
rename(sig = ".group")
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean*1*1),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "spad_29", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: spad_29 por genotipo y riego")
modelo <- aov(formula = op_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
plot(modelo)
ggplot(fb, aes(x = geno, y = op_84, colour = riego)) +
geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
labs(title = "boxplot con interacción de niveles de riego y genotipo" ,
x = "Interacción Riego y Genotipo",
y = "Valor de la variable respuesta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lme4)
modelo <- lme4::lmer(formula = op_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
plot(modelo)
ol <- boxplot(op_84~riego*geno, fb)
ol
library(inti)
model <- remove_outliers(data = fb
,formula = op_84 ~ riego + geno + riego*geno + (1|bloque)
,plot_diag = T
)
model
modelo <- aov(formula = op_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
library(agricolae)
# Ejecutar el test de Duncan
duncan_riego_geno <- duncan.test(modelo, trt = c("riego","geno"), group = TRUE)
print(duncan_riego_geno)
# Verificar si existen grupos formados
if (!is.null(duncan_riego_geno$groups)) {
# Modificar las etiquetas de la columna de grupos para mostrar solo las primeras 2 letras
duncan_riego_geno$groups <- duncan_riego_geno$groups %>%
dplyr::mutate(groups = substr(groups, 1, 2))  # Mostrar solo las 3 primeras letras de la etiqueta
# Graficar
plot(duncan_riego_geno)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
library(agricolae)
# Ejecutar la prueba de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)
# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
# Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
# Graficar
plot(tukey_result)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
tukey_result
library(tidyverse)
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = op_84, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "genotipo", y = "op_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: op_84 por genotipo y riego") +
geom_text(aes(label = str_sub(groups, 1, 2)),  # Mostrar solo las primeras 2 letras
position = position_dodge(0.9),
vjust = -0.5)  # Ajusta la posición vertical de las letras
library(lme4)
modelo <- lme4::lmer(formula = op_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
library(emmeans)
library(multcomp)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(letters = letters, reversed = T)
cm3
dtcm <- as.data.frame(cm2) %>%
rename(sig = ".group")
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean*1*1),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "op_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: op_84 por genotipo y riego")
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
plot(modelo)
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
plot(modelo)
ggplot(fb, aes(x = geno, y = rwc_84, colour = riego)) +
geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
labs(title = "boxplot con interacción de niveles de riego y genotipo" ,
x = "Interacción Riego y Genotipo",
y = "Valor de la variable respuesta") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(lme4)
modelo <- lme4::lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
plot(modelo)
ol <- boxplot(rwc_84~riego*geno, fb)
ol
library(inti)
model <- remove_outliers(data = fb
,formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,plot_diag = T
)
model
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
,data = fb)
anova(modelo)
library(agricolae)
# Ejecutar la prueba de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)
# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
# Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
# Graficar
plot(tukey_result)
} else {
cat("No se puede graficar, no hay grupos formados.")
}
tukey_result
library(tidyverse)
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(grupos, aes(x = geno, y = rwc_84, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(x = "genotipo", y = "rwc_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: rwc_84 por genotipo y riego") +
geom_text(aes(label = str_sub(groups, 1, 2)),  # Mostrar solo las primeras 2 letras
position = position_dodge(0.9),
vjust = -0.5)  # Ajusta la posición vertical de las letras
library(lme4)
modelo <- lme4::lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque)
,data = fb)
anova(modelo)
library(emmeans)
library(multcomp)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(letters = letters, reversed = T)
cm3
dtcm <- as.data.frame(cm2) %>%
rename(sig = ".group")
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean*1*1),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "rwc_84", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: rwc_84 por genotipo y riego")
library(tidyverse)
library(corrplot)
# Eliminar filas con NA y seleccionar solo columnas numéricas no vacías
fb_clean <- fb %>%
select_if(~ is.numeric(.) && any(!is.na(.))) %>%  # Selecciona solo columnas numéricas con al menos un valor no NA
drop_na()  # Elimina filas con NA restantes
# Verificar que hay columnas numéricas suficientes para calcular la correlación
if (ncol(fb_clean) > 1) {
# Calcular la matriz de correlación
cor_matrix <- cor(fb_clean, use = "complete.obs")
# Imprimir la matriz de correlación
print(cor_matrix)
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "circle")
} else {
cat("No hay suficientes columnas numéricas o datos completos para calcular la correlación.\n")
}
library(psych)
fb %>%
select_if(is.numeric) %>%
dplyr::select(!c("block")) %>%
pairs.panels(x = .
, hist.col="red"
, pch = 21
, stars = TRUE
, scale = FALSE
, lm = TRUE
)
# Cargar las librerías necesarias
library(FactoMineR)
library(dplyr)
library(ggplot2)
library(gridExtra)
# Agrupar y resumir los datos
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE), .names = "mean_{col}")) %>%
ungroup()  # Desagrupar los datos después de resumir
# Realizar el PCA, ajustando quali.sup a las columnas cualitativas (riego y geno)
pca_result <- PCA(mv, scale.unit = TRUE, quali.sup = c(1, 2), graph = FALSE)
# Graficar los individuos
p1 <- plot.PCA(pca_result, habillage = "riego", title = "Gráfico de Individuos")
# Graficar las variables
p2 <- plot.PCA(pca_result, choix = "var", title = "Gráfico de Variables")
# Combinar las gráficas en una sola
grid.arrange(p1, p2, nrow = 1)
